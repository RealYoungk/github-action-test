on: push
name: Test, Build and Release apk
jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    # 레포지토리에 업로드를 위해 추가된 퍼미션
    permissions:
      contents: write
    steps:
      # 이 작업은 리포지토리를 로 체크아웃하여 $GITHUB_WORKSPACE워크플로가 리포지토리의 콘텐츠에 액세스할 수 있도록 합니다.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # 2단계에서는 setup-java 라는 다른 GitHub 작업을 사용하여 Android 앱을 빌드하는 데 필요한 Java 환경을 설정합니다 .
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      # 여기서 우리는 액션 에서 사용할 Flutter 환경을 설정 하는 GitHub 액션 flutter-action 을 사용합니다.
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.3.4'
      - run: flutter pub get
      - run: flutter test
      # "flutter build apk" 명령은 모든 대상 아키텍처를 포함하는 "뚱뚱한" 아카이브를 빌드합니다. "flutter build apk –split-per-abi" 명령은 분리된 apk의 아카이브를 빌드합니다(각 대상 아키텍처에 대해 하나씩). 앱이 매우 크거나 사용자가 데이터 비용을 지불해야 하는 지역에 있는 경우 APK 크기를 최소로 유지하는 것이 중요합니다. 따라서 "-split-per-abi" 옵션을 사용하는 것이 좋습니다.
      - run: flutter build apk
      # play store 에 올리는 경우 여러가지 장점들로 인해 appbundle이 권장됨
      - run: flutter build appbundle
      # 이 작업은 GitHub 릴리스를 만들고 선택적으로 여기에 아티팩트를 업로드합니다.
      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: build/app/outputs/apk/debug/*.apk
#      - name: Create Release
#        uses: ncipollo/release-action@v1.11.1
#        with:
#          artifacts: "build/app/outputs/apk/debug/*.apk"
#          token: ${{ secrets.TOKEN }}